#!/bin/sh

sequence=0
indices=
type=o
window_length=10
reg_count=100
rho_init=0.001
moment=0
gamma_bp=1.0
gamma_top=0.0025
beta=1

program=`basename $0`

display_usage() {
    cat << EOS
$program  - a program to display output of recurrent neural networks by means of sequence data as input.

Usage: $program [-s sequence] [-i indices] [-w window_length] [-n reg_count] [-l rho_init] [-m momentum] [-c] [-a] rnn-file sequence-file
Usage: $program [-v] [-h]

Available options are:
-s sequence
    \`sequence' is the number of sequence whose initial context state is used for generation.
-i indices
    \`indices' is the indices to ignore data in sequence-file. the indices are separated by a comma (ex: -i 0,2).
-w window_length
    Window length for BPTT. Default is $window_length.
-n reg_count
    Number of the training iterations of BPTT for each step. Default is $reg_count.
-l rho_init
    Learning rate for BPTT. Default is $rho_init.
-m momentum
    Learning momentum for BPTT. Default is $moment.
-c
    Displays context states instead of output.
-a
    Displays output and context states.
-v
    Prints the version information and exit.
-h
    Prints this help and exit.
-b
    Scaling parameter for backpropagation.
-t
    Scaling parameter for top-down process.
-e
    Scaling parameter for updating pb.

Program execution:
First, $program reads the rnn-file (ex: rnn.dat) generated by rnn-learn in order to setup model parameters. Next, it displays output of a network by means of an input sequence described in sequence-file.
EOS
}


while getopts s:i:w:n:l:m:b:t:e:cavh OPT
do
    case $OPT in
        s ) sequence=${OPTARG};;
        i ) indices=${OPTARG};;
        w ) window_length=${OPTARG};;
        n ) reg_count=${OPTARG};;
        l ) rho_init=${OPTARG};;
        m ) moment=${OPTARG};;
	b ) gamma_bp=${OPTARG};;
	t ) gamma_top=${OPTARG};;
        e ) beta=${OPTARG};;
	c ) type=c;;
        a ) type=a;;
        v ) echo "$program version 1.0"
            exit 0;;
        h ) display_usage
            exit 0;;
        \?) exit 1;;
    esac
done

shift `expr $OPTIND - 1`

rnn_file=$1
sequence_file=$2

if [ x = x"$1" -o x = x"$2" ]; then
    echo "Usage: $program [-s sequence] [-i indices] [-w window_length] [-n reg_count] [-l rho_init] [-m momentum] [-b gamma_bp] [-t gamma_top] [-e beta] [-c] [-a] rnn-file sequence-file"
    exit 1
fi
if [ ! -f "$rnn_file" ]; then
    echo "cannot find rnn-file \`$rnn_file'"
    exit 1
fi
if [ ! -f "$sequence_file" ]; then
    echo "cannot find sequence-file \`$sequence_file'"
    exit 1
fi

python `dirname $0`/rnn_generate_with_file2_pb.py "$sequence" "$indices" "$type" "$window_length" "$reg_count" "$rho_init" "$moment" "$gamma_bp" "$gamma_top" "$beta" "$rnn_file" "$sequence_file"

